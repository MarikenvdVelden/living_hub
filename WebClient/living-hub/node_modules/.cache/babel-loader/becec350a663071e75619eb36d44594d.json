{"ast":null,"code":"var _jsxFileName = \"/Users/farzam/Projects/VU Coding/Living Hub/living-hub/src/components/FilterForms.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { setIndexFields, setFieldValues } from \"../actions\";\nimport { Button, Form, Container, Grid } from \"semantic-ui-react\";\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FilterForms = function () {\n  _s();\n\n  const session = useSelector(state => state.session);\n  const index = useSelector(state => state.index);\n  const fields = useSelector(state => state.indexFields);\n  const fieldValues = useSelector(state => state.fieldValues);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (index && session) {\n      session.getFields(index).then(res => {\n        dispatch(setIndexFields(res.data));\n      });\n    } else {\n      setIndexFields(null);\n    }\n  }, [session, index, dispatch]);\n\n  const onSubmit = (key, value) => {\n    let newFieldValues = { ...fieldValues\n    };\n    newFieldValues[key] = value;\n\n    if (value === \"\") {\n      console.log(\"ommitting\");\n      newFieldValues = _.omit(newFieldValues, key);\n    }\n\n    dispatch(setFieldValues(newFieldValues));\n  };\n\n  const dateFilter = (key, value) => {\n    let newFieldValues = { ...fieldValues\n    }; // this is for the POST method\n\n    if (!newFieldValues.date) {\n      newFieldValues[\"date\"] = {};\n      newFieldValues.date[key] = extractDateFormat(value);\n    } else if (value === null) {\n      newFieldValues.date = _.omit(newFieldValues.date, key);\n\n      if (_.isEmpty(newFieldValues.date)) {\n        newFieldValues = _.omit(newFieldValues, \"date\");\n      }\n    } else {\n      newFieldValues.date[key] = extractDateFormat(value);\n    }\n\n    dispatch(setFieldValues(newFieldValues));\n  };\n\n  const extractDateFormat = date => {\n    if (!date) return \"\";\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const year = date.getUTCFullYear();\n    return year + \"-\" + month + \"-\" + day;\n  };\n\n  const renderFields = () => {\n    return Object.keys(fields).map(key => {\n      if (fields[key] === \"text\") {\n        return /*#__PURE__*/_jsxDEV(Form.TextArea, {\n          value: fieldValues[key] ? fieldValues[key] : \"\",\n          onChange: (e, d) => onSubmit(key, d.value),\n          label: key.charAt(0).toUpperCase() + key.slice(1)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this);\n      }\n\n      if (fields[key] === \"date\") {\n        return /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n              type: \"basic\",\n              label: \"Start Date\",\n              locale: navigator.locale,\n              format: \"YYYY-MM-DD\",\n              onChange: (e, d) => {\n                e.stopPropagation();\n                dateFilter(\"gte\", d.value);\n              }\n            }, \"gte\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this)\n          }, key + \"_gte\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n              type: \"basic\",\n              label: \"End Date\",\n              locale: navigator.locale,\n              format: \"YYYY-MM-DD\",\n              onChange: (e, d) => {\n                e.stopPropagation();\n                dateFilter(\"lte\", d.value);\n              }\n            }, \"lte\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)\n          }, key + \"_lte\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, \"date_filter\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this);\n      }\n\n      if (fields[key] === \"keyword\") {\n        return /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: key.charAt(0).toUpperCase() + key.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: fieldValues[key] ? fieldValues[key] : \"\",\n            onChange: e => onSubmit(key, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this);\n      }\n\n      return null;\n    });\n  };\n\n  if (!fields) return null;else return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: renderFields()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button.Group, {\n      widths: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        className: \"ui red button\",\n        onClick: () => dispatch(setFieldValues(null)),\n        children: \"Reset Filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 7\n  }, this);\n};\n\n_s(FilterForms, \"A8SaorKyK/4ZepOwwrEAMW0M9rY=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = FilterForms;\nexport default FilterForms;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterForms\");","map":{"version":3,"sources":["/Users/farzam/Projects/VU Coding/Living Hub/living-hub/src/components/FilterForms.js"],"names":["React","useEffect","useDispatch","useSelector","_","setIndexFields","setFieldValues","Button","Form","Container","Grid","SemanticDatepicker","FilterForms","session","state","index","fields","indexFields","fieldValues","dispatch","getFields","then","res","data","onSubmit","key","value","newFieldValues","console","log","omit","dateFilter","date","extractDateFormat","isEmpty","month","getMonth","slice","day","getDate","year","getUTCFullYear","renderFields","Object","keys","map","e","d","charAt","toUpperCase","navigator","locale","stopPropagation","target"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport { setIndexFields, setFieldValues } from \"../actions\";\n\nimport { Button, Form, Container, Grid } from \"semantic-ui-react\";\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\n\nconst FilterForms = function () {\n  const session = useSelector((state) => state.session);\n  const index = useSelector((state) => state.index);\n  const fields = useSelector((state) => state.indexFields);\n  const fieldValues = useSelector((state) => state.fieldValues);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (index && session) {\n      session.getFields(index).then((res) => {\n        dispatch(setIndexFields(res.data));\n      });\n    } else {\n      setIndexFields(null);\n    }\n  }, [session, index, dispatch]);\n\n  const onSubmit = (key, value) => {\n    let newFieldValues = { ...fieldValues };\n    newFieldValues[key] = value;\n    if (value === \"\") {\n      console.log(\"ommitting\");\n      newFieldValues = _.omit(newFieldValues, key);\n    }\n    dispatch(setFieldValues(newFieldValues));\n  };\n\n  const dateFilter = (key, value) => {\n    let newFieldValues = { ...fieldValues };\n\n    // this is for the POST method\n    if (!newFieldValues.date) {\n      newFieldValues[\"date\"] = {};\n      newFieldValues.date[key] = extractDateFormat(value);\n    } else if (value === null) {\n      newFieldValues.date = _.omit(newFieldValues.date, key);\n      if (_.isEmpty(newFieldValues.date)) {\n        newFieldValues = _.omit(newFieldValues, \"date\");\n      }\n    } else {\n      newFieldValues.date[key] = extractDateFormat(value);\n    }\n    dispatch(setFieldValues(newFieldValues));\n  };\n\n  const extractDateFormat = (date) => {\n    if (!date) return \"\";\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const year = date.getUTCFullYear();\n    return year + \"-\" + month + \"-\" + day;\n  };\n\n  const renderFields = () => {\n    return Object.keys(fields).map((key) => {\n      if (fields[key] === \"text\") {\n        return (\n          <Form.TextArea\n            key={key}\n            value={fieldValues[key] ? fieldValues[key] : \"\"}\n            onChange={(e, d) => onSubmit(key, d.value)}\n            label={key.charAt(0).toUpperCase() + key.slice(1)}\n          />\n        );\n      }\n      if (fields[key] === \"date\") {\n        return (\n          <Container key=\"date_filter\">\n            <Form.Field key={key + \"_gte\"}>\n              <SemanticDatepicker\n                key=\"gte\"\n                type=\"basic\"\n                label=\"Start Date\"\n                locale={navigator.locale}\n                format=\"YYYY-MM-DD\"\n                onChange={(e, d) => {\n                  e.stopPropagation();\n\n                  dateFilter(\"gte\", d.value);\n                }}\n              />\n            </Form.Field>\n            <Form.Field key={key + \"_lte\"}>\n              <SemanticDatepicker\n                key=\"lte\"\n                type=\"basic\"\n                label=\"End Date\"\n                locale={navigator.locale}\n                format=\"YYYY-MM-DD\"\n                onChange={(e, d) => {\n                  e.stopPropagation();\n\n                  dateFilter(\"lte\", d.value);\n                }}\n              />\n            </Form.Field>\n          </Container>\n        );\n      }\n      if (fields[key] === \"keyword\") {\n        return (\n          <Form.Field key={key}>\n            <label>{key.charAt(0).toUpperCase() + key.slice(1)}</label>\n            <input\n              value={fieldValues[key] ? fieldValues[key] : \"\"}\n              onChange={(e) => onSubmit(key, e.target.value)}\n            />\n          </Form.Field>\n        );\n      }\n      return null;\n    });\n  };\n\n  if (!fields) return null;\n  else\n    return (\n      <Container>\n        <Container>\n          <Form>{renderFields()}</Form>\n        </Container>\n        <br />\n        <Button.Group widths={2}>\n          <Button\n            className=\"ui red button\"\n            onClick={() => dispatch(setFieldValues(null))}\n          >\n            Reset Filters\n          </Button>\n        </Button.Group>\n      </Container>\n    );\n};\n\nexport default FilterForms;\n"]},"metadata":{},"sourceType":"module"}