{"ast":null,"code":"import Axios from \"axios\";\nexport default async function newElasticConnection(host, email, password) {\n  const response = await Axios.get(`${host}/auth/token/`, {\n    auth: {\n      username: email,\n      password: password\n    }\n  });\n  return new Elastic(host, email, response.data.token);\n}\n\nclass Elastic {\n  constructor(host, email, token) {\n    this.host = host;\n    this.email = email;\n    this.api = Axios.create({\n      baseURL: host,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  } // GET\n\n\n  getIndices() {\n    return this.api.get(`/index/`);\n  }\n\n  getIndex(index) {\n    return this.api.get(`/index/${index}`);\n  }\n\n  getFields(index) {\n    return this.api.get(`/index/${index}/fields`);\n  }\n\n  getFieldValues(index, field) {\n    return this.api.get(`/index/${index}/fields/${field}/values`);\n  }\n\n  getDocument(index, doc_id) {\n    return this.api.get(`/index/${index}/documents/${doc_id}`);\n  }\n\n  updateDocument(index, doc_id, fields) {\n    console.log(fields);\n    return this.api.put(`/index/${index}/documents/${doc_id}`, {\n      fields\n    });\n  }\n\n  getQuery(index, q, fields, scroll = \"2m\", per_page = 100, params = {}, filters = {}) {\n    params[\"scroll\"] = scroll; // for scrolling, update with id obtained from results.meta.scroll_id\n\n    params[\"per_page\"] = per_page;\n    if (fields) params[\"fields\"] = fields.join(\",\");\n    if (q) params[\"q\"] = q;\n    if (filters) params = { ...params,\n      ...filters\n    };\n    return this.api.get(`/index/${index}/query`, {\n      params\n    });\n  }\n\n  postQuery(index, q, fields, scroll = \"2m\", per_page = 100, params = {}, filters = {}) {\n    params[\"scroll\"] = scroll;\n    params[\"per_page\"] = per_page;\n    if (fields) params[\"fields\"] = fields.join(\",\");\n    if (q) params[\"q\"] = q;\n    if (filters) params[\"filters\"] = { ...filters\n    };\n    return this.api.post(`/index/${index}/query`, { ...params\n    });\n  } // POST\n\n\n  createIndex(name, guestRole = \"NONE\") {\n    const body = {\n      name: name\n    };\n    if (guestRole !== \"NONE\") body.guest_role = guestRole;\n    return this.api.post(`/index/`, body);\n  }\n\n  createDocuments(name, documentList) {\n    // documentList should be an array of objects with at least the fields title, date and text\n    return this.api.post(`/index/${name}/documents`, documentList);\n  } // DELETE\n\n\n  deleteIndex(index) {\n    return this.api.delete(`/index/${index}`);\n  }\n\n}","map":{"version":3,"sources":["/Users/farzam/Projects/VU Coding/Living Hub/living-hub/src/apis/Elastic.js"],"names":["Axios","newElasticConnection","host","email","password","response","get","auth","username","Elastic","data","token","constructor","api","create","baseURL","headers","Authorization","getIndices","getIndex","index","getFields","getFieldValues","field","getDocument","doc_id","updateDocument","fields","console","log","put","getQuery","q","scroll","per_page","params","filters","join","postQuery","post","createIndex","name","guestRole","body","guest_role","createDocuments","documentList","deleteIndex","delete"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\n\nexport default async function newElasticConnection(host, email, password) {\n  const response = await Axios.get(`${host}/auth/token/`, {\n    auth: { username: email, password: password },\n  });\n  return new Elastic(host, email, response.data.token);\n}\n\nclass Elastic {\n  constructor(host, email, token) {\n    this.host = host;\n    this.email = email;\n    this.api = Axios.create({\n      baseURL: host,\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  }\n\n  // GET\n  getIndices() {\n    return this.api.get(`/index/`);\n  }\n  getIndex(index) {\n    return this.api.get(`/index/${index}`);\n  }\n  getFields(index) {\n    return this.api.get(`/index/${index}/fields`);\n  }\n  getFieldValues(index, field) {\n    return this.api.get(`/index/${index}/fields/${field}/values`);\n  }\n  getDocument(index, doc_id) {\n    return this.api.get(`/index/${index}/documents/${doc_id}`);\n  }\n  updateDocument(index, doc_id, fields) {\n    console.log(fields);\n    return this.api.put(`/index/${index}/documents/${doc_id}`, { fields });\n  }\n  getQuery(\n    index,\n    q,\n    fields,\n    scroll = \"2m\",\n    per_page = 100,\n    params = {},\n    filters = {}\n  ) {\n    params[\"scroll\"] = scroll; // for scrolling, update with id obtained from results.meta.scroll_id\n    params[\"per_page\"] = per_page;\n    if (fields) params[\"fields\"] = fields.join(\",\");\n    if (q) params[\"q\"] = q;\n    if (filters) params = { ...params, ...filters };\n\n    return this.api.get(`/index/${index}/query`, { params });\n  }\n\n  postQuery(\n    index,\n    q,\n    fields,\n    scroll = \"2m\",\n    per_page = 100,\n    params = {},\n    filters = {}\n  ) {\n    params[\"scroll\"] = scroll;\n    params[\"per_page\"] = per_page;\n    if (fields) params[\"fields\"] = fields.join(\",\");\n    if (q) params[\"q\"] = q;\n    if (filters) params[\"filters\"] = { ...filters };\n\n    return this.api.post(`/index/${index}/query`, { ...params });\n  }\n\n  // POST\n  createIndex(name, guestRole = \"NONE\") {\n    const body = { name: name };\n    if (guestRole !== \"NONE\") body.guest_role = guestRole;\n    return this.api.post(`/index/`, body);\n  }\n  createDocuments(name, documentList) {\n    // documentList should be an array of objects with at least the fields title, date and text\n    return this.api.post(`/index/${name}/documents`, documentList);\n  }\n\n  // DELETE\n  deleteIndex(index) {\n    return this.api.delete(`/index/${index}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}